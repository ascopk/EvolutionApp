name: Tag and Release Pipeline
run-name: ${{ github.ref_name }} tag and release

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: write

jobs:  
  build-test-deploy-prod:
    name: Tag and Release pipeline
    runs-on: ubuntu-latest
    concurrency: prod
    environment: prod
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      PULUMI_SECRETS_PROVIDER: ${{ secrets.PULUMI_SECRETS_PROVIDER }}
      PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
      WEBINY_PULUMI_BACKEND: ${{ secrets.WEBINY_PULUMI_BACKEND }}
      WCP_PROJECT_ENVIRONMENT_API_KEY: ${{ secrets.WCP_API_KEY }}
      OKTA_ISSUER: ${{ vars.OKTA_ISSUER }}
      GITHUB_BRANCH: ${{ github.ref_name }}
    steps: 
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check branch name syntax and set version
        run: |
          if ! [[ "${GITHUB_BRANCH}" =~ '^release/v[0-9]+\.[0-9]+\.[0-9]+$' ]]; then
            echo "::error title=BranchNameError::Invalid syntax for release branch name: ${GITHUB_BRANCH}. Please use `release/v` followed by a semantic version. example: release/v1.0.0" 
            exit 1
          fi

          echo "VERSION=${GITHUB_BRANCH##release/}" >> $GITHUB_ENV
          echo "TAGSLIST=$(git tag | jq -R . | jq -sc)" >> $GITHUB_ENV
          echo "# Version: ${GITHUB_BRANCH##release/}" >> $GITHUB_STEP_SUMMARY

      - name: Check existing tags
        id: version-tag
        uses: actions/github-script@v7
        with:
          script: |
            const { VERSION, TAGSLIST } = process.env
            const taglist = JSON.parse(TAGSLIST)
            if (taglist.includes(VERSION)){
              throw Error(`Tag ${newtag} already exists`)
            }
            core.exportVariable('VERSION', VERSION)

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'yarn'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::121566555105:role/service/webiny/webiny-deploy-role-prod-WebinyOIDCRole-cYCiVw6Ug5fk
          role-session-name: AscoWebinyProdPipeline

      - name: Install dependencies
        run: yarn --immutable

      - name: Build custom packages
        run: yarn webiny workspaces run build --folder packages

      - name: Deploy
        run: yarn webiny deploy --env=prod

      - name: Environment summary
        run: yarn webiny info --env=prod >> $GITHUB_STEP_SUMMARY

      - name: Run integration tests
        run: yarn test:integration

      - name: Run end-to-end tests
        run: yarn test:e2e

      - name: Create a new tag
        uses: actions/github-script@v7
        with:
          script: |
            const { RELEASE_NOTES, VERSION } = process.env 

            const tag = await github.rest.git.createTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: VERSION,
              message: VERSION,
              object: context.sha,
              type: "commit",
              tagger: {
                name: "ascodevops",
                email: "devops@asco.org"
              }
            })

            const ref = await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${VERSION}`,
              sha: tag.data.sha
            })

      - name: Create a release
        uses: actions/github-script@v7
        with:
          script: |
            const { VERSION } = process.env 
            const body = `Release ${VERSION} executed by ${{ github.actor }}`
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: VERSION,
              body: body,
              generate_release_notes: true
            });

            core.summary.addRaw(release.data.body, true).write()
